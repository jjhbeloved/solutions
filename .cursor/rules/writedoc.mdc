---
description: 学习笔记生成规范
globs: 
alwaysApply: false
---
# 开源项目学习笔记生成规范

## 一、文件组织与命名

- 所有学习笔记相关文件统一存放在 david 目录下
- 文档类文件放在 david 目录
- 图表类文件放在 david/docs 目录
- 文件名使用英文，命名要有意义且反映内容
- 同一项目的文件建议使用统一前缀，如 `project_name-overview.md`

## 二、自上而下的学习结构

每个开源项目的学习笔记应当按以下结构组织：

1. **项目概览**：
   - 项目定位与目标
   - 核心功能和特性
   - 技术栈概述
   - 整体架构图

2. **核心概念**：
   - 项目中的关键概念和术语
   - 概念之间的关系

3. **架构分解**：
   - 模块划分
   - 组件交互
   - 数据流向

4. **关键流程**：
   - 主要业务流程
   - 关键技术流程

5. **代码实现**：
   - 核心模块源码分析
   - 关键算法和设计模式

6. **学习总结**：
   - 技术亮点
   - 设计亮点
   - 个人收获

## 三、文档格式规范

### Markdown 文档

- 每个 md 文件需包含：
  - 标题（一级标题）
  - 目录（使用 `[TOC]` 或 `## 目录` 手动创建）
  - 正文（按二级、三级、四级、五级标题组织）
  - 目录必须要加上序号，方便识别
  - 参考资料（如有）

- 代码块必须指定语言类型：
  ```python
  # 示例代码
  ```

- 重要内容使用加粗、引用或表格突出

### PlantUML 图表

- 当需要表达流程、结构、关系时，使用 PlantUML 生成图表
- PlantUML 文件存放在 david/docs 目录
- 文件命名规范：`项目名-图表类型-描述.puml`
- 在 md 文件中引用图表：`[文件描述](文件路径)`
- 简化样式设置，使用标准的样式和颜色定义
- 不要混用不同 uml 图的元素
- 不要用 `!pragma utf-8`
- 常用图表类型：
  - 类图：表示类之间的关系
  - 序列图：表示对象之间的交互
  - 活动图：表示流程和算法
  - 组件图：表示系统结构

## 四、Why-What-How 分析框架

在学习过程中，对每个重要模块或功能应用以下分析框架：

### Why（为什么）
- 解决什么问题
- 为什么需要这个设计/功能
- 不这样做会有什么后果

### What（是什么）
- 功能定义和边界
- 核心概念和术语
- 与其他模块的关系

### How（怎么做）
- 实现原理
- 关键算法和数据结构
- 代码示例和分析
- 配置和使用方法

## 五、学习追踪

- 每个项目创建一个学习进度文件：`项目名-progress.md`
- 记录每次学习的日期、内容、问题和收获
- 标记疑难问题和待深入研究的点

## 六、自动化命令

- 当说"画一个 uml 图"，使用 plantuml 格式生成对应 puml 文件
- 当说"写/生成一份笔记"，使用本规范的格式创建 md 文件

## 七、资料参考

- 请一定参考 rocksdb 工程的源码来深入的理解和回答问题
