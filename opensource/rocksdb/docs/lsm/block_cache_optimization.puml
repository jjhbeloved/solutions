@startuml block_cache_optimization

' 使用更直观的组件图语法
!pragma layout smetana
skinparam componentStyle rectangle

title RocksDB Block Cache优化示意图

' 主体结构
rectangle "应用程序请求" as AppRequest

' 缓存结构
component "Block Cache" as BlockCache {
  component "分片机制" as Sharding {
    component "分片1" as Shard1
    component "分片2" as Shard2
    component "分片N" as ShardN
  }
  
  component "缓存内容" as Content {
    component "过滤器块" as Filter
    component "索引块" as Index  
    component "数据块" as Data
    component "元数据块" as Meta
  }
}

database "磁盘存储" as Disk

' 缓存命中流程
component "缓存操作" as CacheOps {
  component "缓存命中流程" as HitFlow {
    [请求数据] --> [查找分片]
    [查找分片] --> [查找数据块]
    [查找数据块] --> [返回数据]
  }
  
  component "缓存未命中流程" as MissFlow {
    [请求数据] -right-> [查找失败]
    [查找失败] -right-> [从磁盘读取]
    [从磁盘读取] -right-> [更新缓存]
    [更新缓存] -right-> [返回数据]
  }
}

' 优化策略
card "主要优化策略" as Strategies {
  card "分片设计" as Strategy1
  card "优先级缓存" as Strategy2
  card "内存布局优化" as Strategy3
  card "缓存替换策略" as Strategy4
}

' 性能提升
card "性能提升" as Performance {
  card "读取延迟降低" as Perf1
  card "读取吞吐量提升" as Perf2
  card "内存使用效率提高" as Perf3
}

' 关系
AppRequest -down-> BlockCache
BlockCache -down-> Disk : 缓存未命中
BlockCache -right-> CacheOps : 处理流程
Strategies -up-> BlockCache : 优化
Performance -up-> BlockCache : 结果

' 优先级和内部关系
Filter -[hidden]right-> Index
Index -[hidden]right-> Data
Data -[hidden]right-> Meta

Filter ..> Index : 优先级高于
Index ..> Data : 优先级高于
Data ..> Meta : 优先级高于

@enduml