@startuml memory_pool_structure
skinparam dpi 300
skinparam defaultFontName "Microsoft YaHei"

' 标题
title 内存池结构设计

' 定义颜色
!define POOL_COLOR #E3F2FD
!define BLOCK_COLOR #BBDEFB
!define SYSTEM_COLOR #90CAF9
!define ALLOC_COLOR #64B5F6
!define FREE_COLOR #42A5F5
!define OBJECT_COLOR #2196F3

package "内存池管理器" as MemoryPoolManager {
    class "内存池" as MemoryPool #POOL_COLOR {
        + Allocate(size): void*
        + Deallocate(ptr): void
        + Reset(): void
        + Release(): void
        - blocks_: vector<Block*>
        - current_block_: Block*
        - current_block_offset_: size_t
        - remaining_: size_t
        - block_size_: size_t
    }
    
    class "内存块" as Block #BLOCK_COLOR {
        + memory_: char*
        + size_: size_t
        + used_: size_t
    }
    
    class "空闲列表" as FreeList #FREE_COLOR {
        + Allocate(): void*
        + Deallocate(ptr): void
        - free_chunks_: list<void*>
        - chunk_size_: size_t
    }
    
    class "对象分配器" as Allocator #ALLOC_COLOR {
        + Allocate<T>(): T*
        + Deallocate<T>(obj): void
        - pool_: MemoryPool*
        - free_lists_: FreeList[]
    }
    
    MemoryPool "1" *-- "多" Block : 包含 >
    Allocator "1" *-- "1" MemoryPool : 使用 >
    Allocator "1" *-- "多" FreeList : 管理 >
}

note right of MemoryPool
  内存池核心功能:
  - 预分配大块内存
  - 快速分配小对象
  - 减少内存碎片
  - 避免频繁系统调用
end note

' 系统内存
package "系统资源" as SystemResources {
    class "系统堆" as SystemHeap #SYSTEM_COLOR
}

' 应用层
package "应用层" {
    class "应用对象" as ApplicationObjects #OBJECT_COLOR
}

' 关系
MemoryPool -down-> SystemHeap : 批量申请内存
ApplicationObjects -up-> Allocator : 请求内存

' 内存分配流程
rectangle "内存分配流程" {
    actor "应用程序" as App
    participant "对象分配器" as AllocFlow
    participant "内存池" as PoolFlow
    participant "内存块" as BlockFlow
    participant "系统内存" as SystemFlow
    
    App -> AllocFlow : 1. 申请内存
    
    alt 适合的空闲块存在
        AllocFlow -> FreeList : 2a. 检查空闲列表
        FreeList -> AllocFlow : 返回已有内存块
    else 无合适空闲块
        AllocFlow -> PoolFlow : 2b. 从池中分配
        
        alt 当前块有足够空间
            PoolFlow -> BlockFlow : 3a. 使用当前块
            BlockFlow -> PoolFlow : 返回内存指针
        else 当前块空间不足
            PoolFlow -> SystemFlow : 3b. 申请新块
            SystemFlow -> PoolFlow : 分配大块内存
            PoolFlow -> BlockFlow : 创建新内存块
            BlockFlow -> PoolFlow : 返回内存指针
        end
        
        PoolFlow -> AllocFlow : 返回分配的内存
    end
    
    AllocFlow -> App : 4. 返回内存给应用
}

' 内存池优势
note bottom of MemoryPoolManager
  内存池优势:
  1. <b>性能提升</b>: 减少系统调用开销，加速小对象分配
  2. <b>内存整合</b>: 减少内存碎片，提高内存利用率
  3. <b>简化管理</b>: 统一内存生命周期，减少内存泄漏
  4. <b>预测性能</b>: 可预测的分配时间，减少性能抖动
end note

@enduml 